{ config, lib, pkgs, ... }: with lib; let
cfg = config.programs.vifm;
kvToKeywords = s: kw: concatStringsSep "\n" (attrValues (mapAttrs (n: v: "${kw} ${n} ${v}") s));
vifmimg = pkgs.writeShellScriptBin "vifmimg" (''
#!/bin/sh
export PCACHE="$HOME/.cache/vifm/thumbnail.$(stat --printf '%n\0%i\0%F\0%s\0%W\0%Y' -- "$(readlink -f "$PWD/$6")" | sha256sum | awk '{print $1}'))"
'' +
(if cfg.vifmimg.terminal == "kitty" then ''
pclear() {
    ${pkgs.kitty}/bin/kitten icat --clear --silent
}
image() {
    ${pkgs.kitty}/bin/kitten icat --silent --transfer-mode=file --scale-up "--place=$4x$5@$2x$3" $6
}
''
else "") + ''
main() {
    case "$1" in
        "clear")
			pclear "$@"
			;;
        "draw")
			FILE="$PWD/$6"
			image "$1" "$2" "$3" "$4" "$5" "$FILE"
			;;
        "video")
			[ ! -f "$PCACHE" ] && \
				${pkgs.ffmpegthumbnailer}/bin/ffmpegthumbnailer -i "$6" -o "''${PCACHE}.jpg" -s 0 -q 5
			image "$1" "$2" "$3" "$4" "$5" "''${PCACHE}.jpg"
			;;
        "pdf")
			[ ! -f "''${PCACHE}.jpg" ] && \
				${pkgs.poppler_utils}/bin/pdftoppm -jpeg -f 1 -singlefile "$6" "$PCACHE"
			image "$1" "$2" "$3" "$4" "$5" "''${PCACHE}.jpg"
			;;
        "audio")
			[ ! -f "''${PCACHE}.jpg" ] && \
				${pkgs.ffmpeg}/bin/ffmpeg -i "$6" "''${PCACHE}.jpg" -y >/dev/null
			image "$1" "$2" "$3" "$4" "$5" "''${PCACHE}.jpg"
			;;
        "font")
			[ ! -f "''${PCACHE}.jpg" ] && \
				${pkgs.fontpreview}/bin/fontpreview -i "$6" -o "''${PCACHE}.jpg"
			image "$1" "$2" "$3" "$4" "$5" "''${PCACHE}.jpg"
			;;
        *)
    esac
}
main "$@"
'');
in {
    options.programs.vifm = {
        enable = mkEnableOption "Vifm - Vim-like file manager";
        
        package = mkOption {
            type = types.package;
            default = pkgs.vifm;
            defaultText = literalExpression "pkgs.vim-full";
            description = ''
                Vifm package to install.
            '';
        };

        vifmimg = {
            enable = mkEnableOption "Image previews for vifm";
            terminal = mkOption {
                type = types.enum [ "kitty" ];
                default = "kitty";
                description = "What terminal should vifm be configured for";
            };
        };

        config = {
            set = mkOption {
                type = (with types; listOf str);
                default = [];
                description = "Set keyword in vifmrc";
            };
            filetype = mkOption {
                type = (with types; attrsOf str);
                default = {};
                description = "Filetype keyword in vifmrc";
            };
            fileviewer = mkOption {
                type = (with types; attrsOf str);
                default = {};
                description = "Fileviewer keyword in vifmrc";
            };
            map = mkOption {
                type = (with types; attrsOf str);
                default = {};
                description = "Bind keyword in vifmrc";
            };
            nnoremap = mkOption {
                type = (with types; attrsOf str);
                default = {};
                description = "Nnoremap keyword in vifmrc";
            };
        };
        
        extraConfig = mkOption {
            default = "";
            type = types.lines;
            description = "Additional configuration to add.";
        };
    };
    config = mkIf cfg.enable {
        home.packages = [ cfg.package ];

        xdg.configFile."vifm/vifmrc".text = ''
            " Generated by Home Manager.
            " Refer to https://wiki.vifm.info/index.php/Configuration_model
        '' + concatStringsSep "\n" [
            (optionalString cfg.vifmimg.enable ''
fileviewer *.pdf
        \ ${vifmimg}/bin/vifmimg pdf %px %py %pw %ph %c >/dev/tty </dev/tty %N
        \ %pc
        \ ${vifmimg}/bin/vifmimg clear >/dev/tty </dev/tty %N
fileviewer *.epub
        \ ${vifmimg}/bin/vifmimg epub %px %py %pw %ph %c >/dev/tty </dev/tty %N
        \ %pc
        \ ${vifmimg}/bin/vifmimg clear >/dev/tty </dev/tty %N
fileviewer *.otf,*.ttf,*.woff
        \ ${vifmimg}/bin/vifmimg font %px %py %pw %ph %c >/dev/tty </dev/tty %N
        \ %pc
        \ ${vifmimg}/bin/vifmimg clear >/dev/tty </dev/tty %N
fileviewer <audio/*>
        \ ${vifmimg}/bin/vifmimg audio %px %py %pw %ph %c >/dev/tty </dev/tty %N
        \ %pc
        \ ${vifmimg}/bin/vifmimg clear >/dev/tty </dev/tty %N
fileviewer <video/*>
        \ ${vifmimg}/bin/vifmimg video %px %py %pw %ph %c >/dev/tty </dev/tty %N
        \ %pc
        \ ${vifmimg}/bin/vifmimg clear >/dev/tty </dev/tty %N
fileviewer <image/*>
        \ ${vifmimg}/bin/vifmimg draw %px %py %pw %ph %c >/dev/tty </dev/tty %N
        \ %pc
        \ ${vifmimg}/bin/vifmimg clear >/dev/tty </dev/tty %N
            '')
            (concatStringsSep "\n" (map (l: "set ${l}") cfg.config.set))
            (kvToKeywords cfg.config.filetype "filetype")
            (kvToKeywords cfg.config.fileviewer "fileviewer")
            (kvToKeywords cfg.config.map "map")
            (kvToKeywords cfg.config.nnoremap "nnoremap")
            cfg.extraConfig
        ];
    };
}
